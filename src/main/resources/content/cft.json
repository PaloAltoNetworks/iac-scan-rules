{
"comment": "!! PLEASE DO NOT EDIT THIS FILE - THIS FILE IS AUTO-GENERATED !!",
"policies": [
  {
    "severity": "medium",
    "rule": "$.Resources.*[?(@.Type=='AWS::S3::Bucket')].Properties.LoggingConfiguration any null",
    "id": "4daa435b-fa46-457a-9359-6a4b4a43a442",
    "enabled": true,
    "resourceType": "s3",
    "policy": "AWS Access logging not enabled on S3 buckets"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.*[?(@.Type=='AWS::CloudTrail::Trail')].Properties.IsMultiRegionTrail any null or $.Resources.*[?(@.Type=='AWS::CloudTrail::Trail')].Properties.IsMultiRegionTrail any equal false",
    "id": "c1ad39ed-5341-43cb-8266-4d93a2033d75",
    "enabled": true,
    "resourceType": "cloudtrail",
    "policy": "AWS CloudTrail is not enabled in all regions"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::KMS::Key and ($.Resources.[*].Properties.EnableKeyRotation does not exist or $.Resources.[*].Properties.EnableKeyRotation is false)",
    "id": "497f7e2c-b702-47c7-9a07-f0f6404ac896",
    "enabled": true,
    "resourceType": "kms",
    "policy": "AWS Customer Master Key (CMK) rotation is not enabled"
  },
  {
    "severity": "high",
    "rule": "$.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].Privileged any equal true",
    "id": "38026e84-451b-4290-a008-562eeb36212a",
    "enabled": true,
    "resourceType": "ecs",
    "policy": "AWS ECS task definition elevated privileges enabled"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].LogConfiguration any null or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].LogConfiguration.LogDriver any null",
    "id": "404b49c0-ad7e-41a7-94ae-587901872524",
    "enabled": true,
    "resourceType": "ecs",
    "policy": "AWS ECS task definition logging not enabled"
  },
  {
    "severity": "low",
    "rule": "$.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].ReadonlyRootFilesystem any null or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].ReadonlyRootFilesystem any equal false",
    "id": "0f4959be-5d2d-41cf-aa45-08bb4c13121f",
    "enabled": true,
    "resourceType": "ecs",
    "policy": "AWS ECS task definition readonlyRootFilesystem not enabled"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.Cpu any null or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].Cpu any null or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.Cpu any equal 0 or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].Cpu any equal 0 or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.Memory any null or $.Resources.*[?(@.Type=='AWS::ECS::TaskDefinition')].Properties.ContainerDefinitions[*].Memory any null",
    "id": "44a82298-64d1-4b4b-a9ad-eeda02448975",
    "enabled": true,
    "resourceType": "ecs",
    "policy": "AWS ECS task definition resource limits not set"
  },
  {
    "severity": "high",
    "rule": "$.Resources.*[?(@.Type=='AWS::RDS::DBInstance')].Properties.StorageEncrypted any null or $.Resources.*[?(@.Type=='AWS::RDS::DBInstance')].Properties.StorageEncrypted any equal false",
    "id": "34fa9efb-d18f-41e4-b93f-2f7e5378752c",
    "enabled": true,
    "resourceType": "rds",
    "policy": "AWS RDS instance is not encrypted"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::RDS::DBInstance and ($.Resources.[*].Properties.MultiAZ does not exist or $.Resources.[*].Properties.MultiAZ is false)",
    "id": "f606fe0b-2950-42ce-a3b2-7f100ece5c3a",
    "enabled": true,
    "resourceType": "rds",
    "policy": "AWS RDS instance with Multi-Availability Zone disabled"
  },
  {
    "severity": "low",
    "rule": "$.Resources.*[?(@.Type=='AWS::RDS::DBInstance')].Properties.CopyTagsToSnapshot any null or $.Resources.*[?(@.Type=='AWS::RDS::DBInstance')].Properties.CopyTagsToSnapshot any equal false",
    "id": "8a910436-344a-4bd9-9359-239a3ca13b99",
    "enabled": true,
    "resourceType": "rds",
    "policy": "AWS RDS instance with copy tags to snapshots disabled"
  },
  {
    "severity": "low",
    "rule": "$.Resources.*[?(@.Type=='AWS::RDS::DBInstance')].Properties.BackupRetentionPeriod any null",
    "id": "f81d0239-3633-4828-a499-d2d1b1219a5c",
    "enabled": true,
    "resourceType": "rds",
    "policy": "AWS RDS instance without Automatic Backup setting"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::Redshift::Cluster and ($.Resources.[*].Properties.PubliclyAccessible exists and $.Resources.[*].Properties.PubliclyAccessible is true)",
    "id": "d65fd313-1c5c-42a1-98b2-a73bdeda19a6",
    "enabled": true,
    "resourceType": "redshift",
    "policy": "AWS Redshift clusters should not be publicly accessible"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::Redshift::Cluster and ($.Resources.[*].Properties.LoggingProperties does not exist or $.Resources.[*].Properties.LoggingProperties is empty or $.Resources.[*].Properties.LoggingProperties.S3KeyPrefix does not exist or $.Resources.[*].Properties.LoggingProperties.S3KeyPrefix is empty)",
    "id": "91c941aa-d110-4b33-9934-aadd86b1a4d9",
    "enabled": true,
    "resourceType": "redshift",
    "policy": "AWS Redshift database does not have audit logging enabled"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::Redshift::ClusterParameterGroup and ($.Resources.[*].Properties.Parameters does not exist or (($.Resources.[*].Properties.Parameters[*].ParameterName contains require_ssl) and ($.Resources.[*].Properties.Parameters[*].ParameterValue is false)))",
    "id": "7446ad28-8502-4d71-b334-18cef8d85a2b",
    "enabled": false,
    "resourceType": "redshift",
    "policy": "AWS Redshift does not have require_ssl configured"
  },
  {
    "severity": "high",
    "rule": "$.Resources.[*].Type equals AWS::Redshift::Cluster and ($.Resources.[*].Properties.Encrypted does not exist or ($.Resources.[*].Properties.Encrypted exists and $.Resources.[*].Properties.Encrypted is false))",
    "id": "0132bbb2-c733-4c36-9c5d-c58967c7d1a6",
    "enabled": true,
    "resourceType": "redshift",
    "policy": "AWS Redshift instances are not encrypted"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type contains AWS::S3::Bucket and ($.Resources.[*].Properties.VersioningConfiguration does not exist or ($.Resources.[*].Properties.VersioningConfiguration exists and $.Resources.[*].Properties.VersioningConfiguration.Status does not equal Enabled))",
    "id": "8ec3f878-0f5e-4782-b4cd-98018b217be5",
    "enabled": true,
    "resourceType": "s3",
    "policy": "AWS S3 Object Versioning is disabled"
  },
  {
    "severity": "high",
    "rule": "($.Resources.*[?(@.Type=='AWS::S3::Bucket')].Properties.AccessControl any equal PublicRead or $.Resources.*[?(@.Type=='AWS::S3::Bucket')].Properties.AccessControl any equal PublicReadWrite) and $.Resources.*[?(@.Type=='AWS::S3::Bucket')].Properties.WebsiteConfiguration any null",
    "id": "bbb01285-7fc6-4649-85c0-6ab9f08bde4f",
    "enabled": true,
    "resourceType": "s3",
    "policy": "AWS S3 buckets are accessible to public"
  },
  {
    "severity": "low",
    "rule": "$.Resources.*[?(@.Type=='AWS::S3::Bucket')].Properties.BucketEncryption any null or $.Resources.*[?(@.Type=='AWS::S3::Bucket')].Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm any null",
    "id": "ff6a3231-bb09-4fba-82ea-46ee3228a9f2",
    "enabled": true,
    "resourceType": "s3",
    "policy": "AWS S3 buckets do not have server side encryption"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::SNS::Subscription and ($.Resources.[*].Properties.Protocol exists and $.Resources.[*].Properties.Protocol equals http)",
    "id": "b53e5177-96e1-4999-a9c8-6400190910bb",
    "enabled": true,
    "resourceType": "sns",
    "policy": "AWS SNS subscription is not configured with HTTPS"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::SQS::Queue and ($.Resources.[*].Properties.KmsMasterKeyId exists and $.Resources.[*].Properties.KmsMasterKeyId contains alias/aws/sqs)",
    "id": "0a626f64-d911-4366-b7dc-629a6557d7b5",
    "enabled": true,
    "resourceType": "sqs",
    "policy": "AWS SQS queue encryption using default KMS key instead of CMK"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.[*].Type equals AWS::EC2::Subnet and ($.Resources.[*].Properties.MapPublicIpOnLaunch exists and $.Resources.[*].Properties.MapPublicIpOnLaunch is true)",
    "id": "11743cd3-35e4-4639-91e1-bc87b52d4cf5",
    "enabled": true,
    "resourceType": "ec2",
    "policy": "AWS VPC subnets should not allow automatic public IP assignment"
  },
  {
    "severity": "medium",
    "rule": "$.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '22' && @.ToPort == '22' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '22' && @.ToPort == '22' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '21' && @.ToPort == '21' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '21' && @.ToPort == '21' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '5800' && @.ToPort == '5800' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '5800' && @.ToPort == '5800' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '5900' && @.ToPort == '5900' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '5900' && @.ToPort == '5900' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '2323' && @.ToPort == '2323' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '2323' && @.ToPort == '2323' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '23' && @.ToPort == '23' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '23' && @.ToPort == '23' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '25' && @.ToPort == '25' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '25' && @.ToPort == '25' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '110' && @.ToPort == '110' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '110' && @.ToPort == '110' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '143' && @.ToPort == '143' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '143' && @.ToPort == '143' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == '-1' && @.FromPort == '53' && @.ToPort == '53' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '53' && @.ToPort == '53' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'udp' && @.FromPort == '135' && @.ToPort == '135' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '135' && @.ToPort == '135' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == '-1' && @.FromPort == '137' && @.ToPort == '137' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '137' && @.ToPort == '137' && @.CidrIp6 == '::/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'udp' && @.FromPort == '69' && @.ToPort == '69' && @.CidrIp == '0.0.0.0/0')] size greater than 0 or $.Resources.*[?(@.Type == 'AWS::EC2::SecurityGroup')].Properties.SecurityGroupIngress[?(@.IpProtocol == 'tcp' && @.FromPort == '69' && @.ToPort == '69' && @.CidrIp6 == '::/0')] size greater than 0",
    "id": "b95c4df5-7881-4dda-85ea-fb8c83600d03",
    "enabled": true,
    "resourceType": "AWS security group ingress ports",
    "policy": "AWS security group allows traffic from blocked ports"
  }
]
}